func maxProfit(prices []int) int {
	res := 0
	min := prices[0]
	len := len(prices)
	for i := 1; i < len; i++ {
		res = max(res, prices[i]-min)
		if min > prices[i] {
			min = prices[i]
		}
	}
	return res
}

func max(a int, b int) int {
	if a > b {
		return a
	}
	return b
}

//迷迷糊糊做出来的，真的好久不学习，现在脑子跟一团浆糊一样
//简单来说，这题看起来像是动态规划，有动态规划的思想在，但更像是普通的数组题
//保存此前的价格最低的股票值，然后往后遍历，发现如果某刻卖出比现在收益高了，就更新收益

//10.14日再次做题，发现还是不太会，总是会陷入“如果当前是最低点，那么后面的高点和这个最低点的差值不如以前的高点和次低点的差值怎么办？
//问题是，因为一次循环，所以每个低点都会被遍历到。min保有的是当前一个范围内的最低点。如果收益够大，我就可以在某刻卖出；然后往后继续看有没有更大的收益
//这个是比较获得的，不是说找到一个最低点，就直接找最高点之后的值了